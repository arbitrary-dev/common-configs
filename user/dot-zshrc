if [[ -d "${ZSHRC_D:-/etc/zsh/zshrc.d}" ]]; then
  for f in "${ZSHRC_D:-/etc/zsh/zshrc.d}"/*; do
    source $f
  done
fi

export PS1='%B%F{green}'$PS1

alias hanako-fm="mpv https://musicbird.leanstream.co/JCB069-MP3"

alias yt="youtube-dl"
# YouTube watch
# TODO gnome-session-inhibit --inhibit idle:suspend
alias ytw="mpv --ytdl-format='worstvideo[height>=240]+worstaudio'"
# YT music
ytm() {
  if [[ -z "$@" && -z "$YTM_DEF_PLAYLIST" ]]; then
    echo "No YTM_DEF_PLAYLIST specified!"
    return 1
  fi

  local format="bestaudio"
  while true; do
    case "$1" in
      w)  local format="worstaudio" ;;
      bc) local bigcache ;;
      *)  break ;;
    esac
    shift
  done

  mpv --no-video \
      --ytdl-format=$format${bigcache-[filesize<14M]} \
      ${bigcache---demuxer-max-bytes=5MiB} \
      ${bigcache+--demuxer-max-bytes=150MiB} \
      "${=@:---shuffle $YTM_DEF_PLAYLIST}"
}
# List available formats for YT video
alias ytf="youtube-dl --list-formats"
# Download YT audio in best quality
alias yta="youtube-dl -f bestaudio[ext=m4a]"
# Download YT video in best quality
alias ytv="youtube-dl -f bestvideo+bestaudio"

# Download YT video using free proxies
ytp() {
  local proxies=(`
    curl -s https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list.txt \
    | grep RU \
    | sed -E -e 's/([^ ]+) [^S]*(S?).*/\2\1/' -e 's_^S_https://_'
  `)
  while true; do
    local p="${proxies[`shuf -i1-${#proxies} -n1`]}"
    echo -n "\nTrying with $p...\n"
    #yt -f 243+249 --proxy "$p" https://www.youtube.com/watch?v=$1 \
    yt --proxy "$p" "$@" \
    && break
  done
}

# Download several YT videos
yts() {
  echo $@ \
  | xs -d\  youtube-dl -f 243+139 https://www.youtube.com/watch?v={}
}

alias ag-todos="ag '(((//|/?\*|#) )|\*\*|)\b(TODO|FIXME)\b(?!(:|.*INT-\d)).*$'"
alias am="alsamixer"
alias feh="feh --auto-rotate --geometry 640x480 --image-bg black -Z -."
alias lp-a4="lp -o fit-to-page -o PageSize=A4 -o PageRegion=A4 -o PaperDimension=A4 -o ImageableArea=A4"
alias sway-list-windows="swaymsg -t get_tree | grep app_id"

alias m=memo
alias me="memo --edit"

# Start SSH agent
alias ssha='eval "`ssh-agent -s`"'
# Kill SSH agent
alias sshk='ssh-agent -k'
# Setup SSH terminal
ssht() {
  ssh $1 mkdir -p .terminfo/r
  scp /usr/share/terminfo/r/rxvt-unicode-256color $1:.terminfo/r
}

vi() {
  arr=(${(s/:/)@})
  if (( $# == 1 && $#arr == 2 )); then
    vim +${arr[-1]} -u /etc/vim/vimrc "${arr[1,-2]}"
  else
    vim -u /etc/vim/vimrc "$@"
  fi
}

gen-passw() {
  strings /dev/urandom \
  | grep -oE '[a-zA-Z0-9.,/\'\''"]' \
  | head -${1:-32} \
  | tr -d '\n'
  echo
}

calc-music-checksums() {
  cksfv -c *.{flac,m4a,mp3} | grep -v '^;' | tee checksums.sfv
}

get-host-certificate() {
  local host=$1
  local port=${2:-443}
  openssl s_client -servername $host -connect $host:$port \
  < /dev/null 2> /dev/null \
  | sed -n '/BEGIN/,/END/p'
}

join_with() {
  local IFS="$1"
  shift
  echo "$*"
}

ls-files() {
  local joined="`join_with '|' $*`"
  find $* -type f | sed -E "s!($joined)/!!" | sort
}

todo() {
  local t=$(join_with - $0 $*)
  vim $MY_DOCS/_misc/"$t".txt
}
notes() { vim $MY_DOCS/_misc/notes.md; }
recipes() { vim $MY_DOCS/recipes/README.md; }

alias wine32="WINEARCH=win32 WINEPREFIX=~/.wine32 wine"
alias winecfg32="WINEARCH=win32 WINEPREFIX=~/.wine32 winecfg"
alias winetricks32="WINEARCH=win32 WINEPREFIX=~/.wine32 winetricks"

weather() {
  local data="{
    time: (.time | tonumber / 100),
    chanceofrain,
    humidity,
    precipMM,
    tempC,
    uvIndex,
    wind: (.winddir16Point + \", \" + .windspeedKmph + \" Kmph\"),
    desc: (.weatherDesc | map(.value) | join(\"; \"))
  }"
  curl -s wttr.in?format=j1 \
  | jq "[
    (.current_condition[0] |{
      localObsDateTime,
      humidity,
      precipMM,
      temp_C,
      uvIndex,
      wind: (.winddir16Point + \", \" + .windspeedKmph + \" Kmph\"),
      desc: (.weatherDesc | map(.value) | join(\"; \"))
    }),
    (.weather[0] | {
      date: .date,
      hourly: .hourly
        | map(select((.time | tonumber / 100) >= (`date +%_H` / 3 | floor) * 3 ))
        | map($data)
    }),
    (.weather[1] | {
      date: .date,
      hourly: .hourly | map($data)
    })
  ]"
}

# BT volume
btv() {
  # TODO use udev rule unstead
  if amixer -D bluealsa >/dev/null; then
    local ctl=`amixer -D bluealsa scontrols | grep -i a2dp | cut -d\' -f2`
    local val=${1:-75%}
    echo "amixer -D bluealsa sset '$ctl' $val"
    amixer -D bluealsa set $ctl $val > /dev/null
  fi
}

# BT charge
btc() {
  local ctl=`amixer -D bluealsa scontrols | grep -oiE "'.*battery.*'"`
  [ -z "$ctl" ] && echo 'No BT battery controls available!' && return 1
  echo "amixer -D bluealsa sget $ctl"
  amixer -D bluealsa sget $ctl | grep -oE [0-9]+%
}

# Connect BT device
bt() {
  if (( ! $# )); then
    echo "Choose device to connect to:"
    bluetoothctl <<< devices | grep Device | cut -d\  -f3-
    return
  fi

  # Connect
  local dev=`bluetoothctl <<< devices | grep -i "device.*$1" | cut -d\  -f2-`
  dev=(${(s/ /)dev})
  echo "Connecting to ${dev[@]:1}..."
  (cat <<EOF && sleep 5) | bluetoothctl
power on
connect ${dev[1]}
EOF

  # Set volume
  printf "Setting bluetooth volume to 75%%... "
  btv 75% >/dev/null && echo "OK"
}

nc() {
  pgrep mpd >/dev/null || mpd
  ncmpcpp
}
mpdr() {
  mpd --kill 2> /dev/null
  mpd /etc/mpd-remote.conf
}
ncr() {
  pgrep mpd >/dev/null || mpdr
  nc -c ~/.ncmpcpp/config-remote
}

discogs() {
  local s="$@"
  w3m https://www.discogs.com/search?q=${s// /+}
}

yt2cue() {
  # RS="\r\n"
  # match($0, "([0-9:]+) *\\( *(.+) *\\) *(.+) *", arr)
  gawk 'BEGIN{num=1}
  match($0, "([0-9:]+) *- *(.+) *", arr) {
    split(arr[1],time,":")
    time[1]=time[1]*60+time[2]
    time[2]=time[3]

    artist = "Johann Sebastian Bach" # arr[2]
    title = arr[2]

    printf "TRACK %02d AUDIO\n", num
    printf "  TITLE \"%s, %s\"\n", prefix, title
    printf "  PERFORMER \"%s\"\n", artist
    printf "  INDEX 01 %02d:%02d:00\n\n", time[1], time[2]
    num+=1
    next
  }
  {
    gsub(/^ +| +$/, "", $0)
    ! /^\[/ && prefix=$0
    next
  }'
}

gnumeric-txt() {
  ssconvert \
    -T Gnumeric_stf:stf_assistant \
    -O "separator='	' format=preserve" \
    $1 fd://1
}

mnt() {
  local dev=$1

  if [[ ! "$dev" ]]; then
    local ds=(`ls /dev/sd?? 2>/dev/null`)
    if (( ! ${#ds} )); then
      echo "No devices available!"
      return 1
    elif (( ${#ds} == 1 )); then
      dev=${ds[1]}
    else
      sudo lsblk -lo path,label -e 259
      echo
      read "dev?Which one? "
      echo
    fi
  fi

  local devs
  if [[ -e "/dev/$dev" ]]; then
    devs=("/dev/$dev")
  elif [[ "$dev" = /dev/* && -e "$dev" ]]; then
    devs=("$dev")
  else
    devs=(`sudo lsblk -lo path,label -e 259 | grep $dev | cut -d\  -f1`)
  fi

  if [[ -z "$devs" ]]; then
    echo "There's no \"$dev\" available!"
    return 1
  fi

  if (( $#devs == 1 )) && [[ "$devs" =~ '^/dev/sd[a-z]$' ]] && ls "$devs"* | grep -q '[0-9]$'; then
    devs=(`ls "$devs"* | grep '[0-9]$'`)
  fi
  local one=`(( ${#devs[@]} == 1 )) && echo 1`

  for dev in "${devs[@]}"; do
    local label=""
    [[ "$one" && "$2" ]] && label="$2"
    [[ -z "$label" ]] && label="`sudo lsblk -no label $dev`"
    [[ -z "$label" ]] && label="`sudo lsblk -no name $dev`"
    local to="/mnt/$label"
    local i=1
    while { mount | grep -q "$to" } {
      i=$(($i + 1))
      to=$to$i
    }
    sudo mkdir -p "$to"
    if grep -q "\s$to\s" /etc/fstab && sudo mount "$to" \
        || sudo mount -o umask=000 "$dev" "$to" 2>/dev/null \
        || (sudo mount "$dev" "$to" && sudo chown $USER:$USER "$to"); then
      echo "\"$dev\" is mounted to \"$to\""
      [[ $one ]] && pushd "$to"
    fi
  done
}

umnt() {
  local from=$1
  if [ -z "$from" ]; then
    for m in `mount | grep /mnt | cut -d\  -f3`; do
      [[ "$PWD" = "$m"* ]] && from="$m" && break
    done
    if [ -z "$from" ]; then
      echo "No mount point were specified!"
      return 1
    fi
  fi
  [[ "$from" != /mnt/* ]] && from="/mnt/$from"
  mount | grep -q "$from" && [[ "$PWD" = "$from"* ]] && cd ~
  local dev=`mount | grep $from | cut -d\  -f1 | sed 's/[0-9]\+$//'`

  sudo sh -c "
    printf 'Unmounting $from... '
    umount '$from' \
    && rm -d '$from' \
    && echo OK
  "
  if (( ! `mount | grep -c $dev` )) && whence -p eject-device >/dev/null; then
    read -k "a?No more mounts for $dev, eject it? "
    echo
    [[ "$a" != y ]] && return
    eject-device $dev
  fi
}

# Phone

mnt-phone() {
  mkdir -p /mnt/phone \
  && mtpfs -o big_writes /mnt/phone
}
umnt-phone() {
  fusermount -u /mnt/phone \
  && rm -d /mnt/phone
}

# Work

alias docker-start="sudo rc-service docker start"
alias docker-stop="sudo rc-service docker stop"

sbt-ta() {
  sbt -Dsbt.supershell=false -Dsbt.color=true \
    testAll \
    2>/dev/null \
  | \sed -En '/\[.*(info|error).*\]/p'
}

sbtv-to() {
  sbt "$1 / Test / testOnly ${2:+*$2*} ${3:+-- -z \"$3\"}"
}

sbt-to() {
  sbt -Dsbt.supershell=false -Dsbt.color=true \
    "$1 / Test / testOnly ${2:+*$2*} ${3:+-- -z \"$3\"}" \
    2>/dev/null \
  | \sed -En '/\[.*(info|error).*\]/p'
}

sbt-it() {
  sbt -Dsbt.supershell=false -Dsbt.color=true \
    integrationTest \
    2> /dev/null \
  | \sed -En '/\[.*(info|error).*\]/p'
}

sbt-ito() {
  sbt -Dsbt.supershell=false -Dsbt.color=true \
    "$1 / IntegrationTest / testOnly ${2:+*$2*} ${3:+-- -z \"$3\"}" \
    2> /dev/null \
  | \sed -En '/\[.*(info|error).*\]/p'
}

sbtv-ito() {
  sbt "$1 / IntegrationTest / testOnly ${2:+*$2*} ${3:+-- -z \"$3\"}"
}

jnote() {
  docker run -v "$PWD":/home/jovyan/work -p 8888:8888 jupyter/scipy-notebook
}

# Scala Metals

_check-tmpdir() {
  if [[ ! -w "$TMPDIR" ]]; then
    echo "No writable TMPDIR specified!"
    return 1
  fi
}

_push-metals-tmpfs() {
  _check-tmpdir || return 1

  local project=`basename $PWD`
  local target="$TMPDIR/.bloop/$project"

  printf "Preparing $target... "
  # Why not reuse? https://github.com/scalameta/coc-metals/issues/410
  rm -rf .bloop .metals "$target"
  mkdir -p "$target" \
  && ln -s $target .bloop \
  && echo "OK"
}

_pop-metals-tmpfs() {
  _check-tmpdir || return 1

  local project=`basename $PWD`
  local target="$TMPDIR/.bloop/$project"

  printf "Cleaning up... "
  # Why not reuse? https://github.com/scalameta/coc-metals/issues/410
  rm -rf .bloop .metals "$target" && echo "OK"
}

_metals_open() {
  if _push-metals-tmpfs; then
    if vim "$1"; then
      sleep 1
      _pop-metals-tmpfs
    fi
  fi
}

metals() {
  export TMPDIR=${TMPDIR:-/tmp}

  if [[ "$1" == "-c" || "$1" == "--clean" ]]; then
    printf "Cleaning up everything... "
    rm -rf .bloop .metals **/target/ >/dev/null || return 1
    echo "Done."
    shift
  fi

  local file="$1"
  file="${file:-build.sbt}"

  local line
  if [[ "$file" != "${file%:*}" ]]; then
    line="${file##*:}"
  fi
  if [[ -f "${file%:*}" ]]; then
    _metals_open "$file"
  elif [[ -n "$1" && ! -f "${file%:*}" ]]; then
    local fs
    if [[ "${file%:*}" =~ [A-Z] ]]; then
      fs=(`ag --case-sensitive -g "\b${file%:*}\b"`)
    else
      fs=(`ag -g "${file%:*}"`)
    fi
    if (( $#fs > 1 )); then
      for f in $fs; do echo $f; done
      echo
      vared -p "Which one? " -c file
      echo
      metals $file
    elif (( $#fs )); then
      file=${fs[1]}${line:+:$line}
      _metals_open "$file"
    else
      echo "No matches found!"
      return 1
    fi
  fi
}

rec-screen() {
  local adev=`pactl list short sources | grep -Eo '\b\S+\.monitor\b' | tail -1`
  echo $adev

  pactl set-source-mute $adev false
  echo "Source unmuted."
  pactl set-source-volume $adev 100%
  echo "Volume set to 100%."

  xset s off -dpms
  echo "Screen saver turned off."

  local out=~"/Videos/_unsorted/screen-`date +%Y-%m-%d-%H%M%S`.mp4"
  mkdir -p "`dirname $out`"

  # TODO utilize xrectsel

  # The range of the CRF scale is 0–51, where 0 is lossless, 23 is the default,
  # and 51 is worst quality possible. A lower value generally leads to higher
  # quality, and a subjectively sane range is 17–28. Consider 17 or 18 to be
  # visually lossless or nearly so; it should look the same or nearly the same
  # as the input but it isn't technically lossless.
  ffmpeg -y -f x11grab -draw_mouse 0 -show_region 1 -video_size 800x600 \
    -framerate 25 -i :0.0+1060,30 \
    -f pulse -i $adev \
    -c:a libfdk_aac -profile:a aac_he -ar 44100 -vbr 3 -ac 2 \
    -c:v libx264 -preset:v fast -crf 18 \
    -vf hqdn3d=4:3:6:4.5 \
    $out
  # -c:v libx264 -preset:v veryslow -crf 17 \
  echo "$out"

  xset s on +dpms
  echo "Screen saver turned on."
}

# Installs extension for ungoogled-chromium
#
# Set "Always promt for install" in case of issues:
# chrome://flags/#extension-mime-request-handling
uc-ext() {
  if (( $# == 0 )); then
    echo "Please specify extension ID and ungoogled-chromium version!"
    return 1
  fi

  local ext=$1
  local ver=${2:-97.0.4692.71}

  [ -z "$2" ] && echo "Assuming ungoogled-chromium $ver"

  xdg-open "https://clients2.google.com/service/update2/crx?response=redirect&acceptformat=crx2,crx3&prodversion=$ver&x=id%3D$ext%26installsource%3Dondemand%26uc"
}

# Install extension for Gnome
g-ext() {
  if (( $# == 0 )) || [[ "$1" != *.zip ]]; then
    echo "Please specify extension zip-archive!"
    return 1
  fi

  local dir=~"/.local/share/gnome-shell/extensions"
  [ ! -d "$dir" ] && mkdir -p "$dir" && echo "Created: $dir"

  local ext="$1"
  local uuid=`unzip -p $ext metadata.json | jq -r .uuid`

  printf "Unpacking $uuid... "
  unzip -qq $ext -d $dir/$uuid \
  && echo "done" \
  || echo "fail"

  if read -q ?'Restart Gnome and enable extension? '; then
    echo
    busctl --user call org.gnome.Shell /org/gnome/Shell org.gnome.Shell \
      Eval s 'Meta.restart("Restarting…")'
    gnome-extensions enable $uuid && echo "Extension enabled: $uuid"
  fi
  echo
}

alias cores-temp="watch -tn3 sh -c \"sensors coretemp-isa-0000 | sed -nE '/^Core/s/[^+]+\+([0-9]+).+/\1/p' | column  -x -c 24 | tr '\t' ' '\""
alias uc="sudo unlock-cpu"

# Converts this: '2022'!$AG$13,'2022'!$AG$23,'2022'!$AG$33
# Into this:     '2022'!$AG$10,'2022'!$AG$20,'2022'!$AG$30
awk-upd-csv-vals() {
	awk -F, 'BEGIN { OFS = FS } {
		for (i=1; i<=NF; i++) {
			split($i, a, "$")
			$i = sprintf("%s$%s$%d", a[1], a[2], a[3] - 3)
		}
		print
	}'
}

purchase() {
  local total=0
  while read a b name; do
    if [[ "$a" == *g ]]; then
      local mass=${a%g}
    else
      local mass=`bc <<< "scale=2;$a*1000/$b"`
    fi
    echo "${mass}g of \"$name\""
    total=`bc <<< "scale=2;$total + $b*$mass/1000"`
  done
  echo "Total: ${total}€"
}
