let s:profile = expand('<sfile>:p:h') . '/vimrc.profile'
if filereadable(s:profile)
  exec 'source ' . s:profile
endif

"autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
"autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
"autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

" Causes random issues
"silent exec "!mkdir -p /tmp/$USER"
"set viewdir=/tmp/$USER/vim_view
"au BufWritePost,BufLeave,WinLeave ?* mkview
"au BufReadPre ?* silent loadview

set number
set nowrap
set smartindent expandtab sw=2 ts=2 sts=2
set clipboard=unnamedplus
set backspace=indent,eol,start
set textwidth=80 colorcolumn=80

" Allow switching between modified buffers
set hidden

" Enables per file VIM configuration
set modeline

" Disable auto-wrapping on typing
set formatoptions-=t

" Smart search
set hlsearch ignorecase smartcase

au FileType scala setlocal tw=110 cc=110
" nosmartindent for python, cause it messes up with shifting #* lines
au FileType python setlocal fdm=indent nosi

set fdc=0
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax
au FileType perl setlocal sw=4 ts=4 sts=4 et

set exrc
set secure

map K i<CR><Esc>

map =jq :%!jq --indent 2<CR>
map =jd :%!python3 -c '
\import json,sys;
\obj = json.loads(sys.stdin.read());
\print(json.dumps(json.dumps(obj, separators=(",", ":"))))
\'<CR>
map =jl :%!python3 -c 'import json,sys; print(json.loads(sys.stdin.read()))'<CR>

nnoremap <silent> <leader>. /^[<\|=>]\{7}.*$<CR>
nnoremap <silent> <leader><leader> :nohlsearch<CR>
nnoremap <silent> <leader>dt :diffthis<CR>
nnoremap <silent> <leader>do :diffoff<CR>
nnoremap <silent> <leader>dp :diffput<CR>
nnoremap <silent> <leader>dg :diffget<CR>
nnoremap <silent> <leader>w :set wrap!<CR>
nnoremap <silent> <leader>bw :bp\|bw#<CR>
nnoremap <silent> <leader>fd :setl fdm=indent<CR>:let &l:fdl=indent('.')/&sw<CR>

" Prevents opening of the folds during }{ navigation
" https://github.com/vim/vim/issues/7134
set foldopen-=block

" trailing spaces highlighting
au FileType *
  \ if &ft == 'diff' |
    \ match Error /\(^+.\{-}\)\@<=\s\+$/ |
  \ else |
    \ 2match Error /\s\+$/ |
  \ endif

" Find syntax highlight group under cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" fix trailing space in diff additions only
command FTS %s/^\(+.\{-}\)\s\+$/\1/
" fix trailing space anywhere
command FTSA %s/\s\+$//

function ScalaSpec()
  if ! $ft == 'scala'
    return
  endif
  let file = expand('%:p')
  if file =~ '/main/'
    let f = substitute(file, '/main/', '/test/', '')
    let f = substitute(f, '\(\.scala\)\@=', 'Spec', '')
  else
    let f = substitute(file, '/test/', '/main/', '')
    let f = substitute(f, 'Spec\.', '.', '')
  endif
  if filereadable(f)
    exec ':edit ' . f
  endif
endfunction
map <silent> <leader>ss :call ScalaSpec()<CR>

" Enables markdown folding
let g:markdown_folding = 1

syntax on
filetype plugin indent on

" Colors

" 0 8  black
" 1 9  red
" 2 10 green
" 3 11 yellow
" 4 12 blue
" 5 13 magenta
" 6 14 cyan
" 7 15 white

" Disable bold style
set t_md=

exe 'hi ColorColumn ctermfg=black ctermbg=' . g:hcolordark
hi clear Search
hi Search cterm=inverse
hi clear IncSearch
hi link IncSearch Search

set fillchars+=vert:\ 
hi clear VertSplit
hi link VertSplit StatusLineNC

exe 'hi Visual ctermfg=black ctermbg=' . g:hcolor
"hi Todo ctermfg=brown ctermbg=178
hi Comment ctermfg=darkgray
hi Folded ctermfg=darkgray ctermbg=none
hi FoldColumn ctermfg=darkgray ctermbg=none
hi StatusLine cterm=none ctermfg=white ctermbg=darkgray
hi StatusLineNC cterm=none ctermfg=black ctermbg=darkgray
hi VertSplit cterm=none ctermfg=black ctermbg=darkgray
hi LineNr ctermfg=darkgray

set cursorline
hi CursorLine cterm=none
map <silent> <leader>cl :call ToggleCursorLine()<CR>
function ToggleCursorLine()
  if match(execute('hi CursorLine'), 'ctermbg') >= 0
    hi clear CursorLine
  else
    exe 'hi CursorLine ctermbg=' . g:hcolordark
  endif
endfunction
exe 'hi CursorLineNr cterm=none ctermfg=black ctermbg=' . g:hcolor

"hi ModeMsg cterm=none ctermfg=223 ctermbg=brown
hi ModeMsg ctermfg=16 ctermbg=11
hi ErrorMsg ctermfg=black ctermbg=red

hi DiffChange ctermfg=black ctermbg=darkred
hi DiffText ctermfg=white ctermbg=red
hi DiffDelete ctermfg=darkgray ctermbg=none
hi diffRemoved ctermfg=red
hi DiffAdd ctermfg=black ctermbg=darkgreen
hi diffAdded ctermfg=darkgreen
"syntax match DiffMerge /^[<|=>]\{7}.*$/ containedin=ALL contained
"hi link DiffMerge Comment
hi clear diffFile
hi link diffFile NonText
hi clear diffIndexLine
hi link diffIndexLine diffFile

hi NonText ctermfg=darkgray
hi SignColumn ctermbg=none
hi Pmenu ctermfg=lightgray ctermbg=237
exe 'hi PmenuSel ctermfg=black ctermbg=' . g:hcolor

hi scalaKeywordModifier ctermfg=yellow
hi scalaUnimplemented ctermfg=black ctermbg=yellow

hi CocErrorFloat ctermfg=lightred
hi CocWarningFloat ctermfg=lightyellow
hi CocHighlightText ctermbg=237
hi CocHoverRange ctermbg=235
hi CocCursorRange ctermbg=235

hi markdownUrl ctermfg=lightblue
hi markdownLinkText ctermfg=lightblue cterm=underline
