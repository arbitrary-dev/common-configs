export GIT_DISCOVERY_ACROSS_FILESYSTEM=1

esc=$(printf '\033')
alias _shorten-paths="perl -pE 's/[^ ]+ -> //;s/(?<!\.\.)\/.+\/([^\/]+\/)/\/**\/\1/'"

git-unshallow() {
  git fetch --unshallow
  git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
}

alias git-reset-tree="git read-tree --reset -u HEAD"
alias git-update-tree="git read-tree -m -u HEAD"

git-fix-ownership() {
  local user=$1
  cd /
  git ls-tree -r HEAD home/$user --name-only \
  | xargs chown $user:$user
}

## Git configure user.
 #
 # New users could be added in /etc/git-users
 # or whatever $GIT_USERS points to.
gcu() {
  if [[ -z "$1" ]]; then
    echo "Specify a user!"
    return 1
  fi

  local users=${GIT_USERS:-/etc/git-users}

  grep -E "^$1|$1" $users | read alias user email

  if (( $? )); then
    echo "There's no such user '$1' in $users !"
    return 1
  fi

  if git config user.name "$user" \
     && git config user.email "$email"
  then
     echo "Configured user: $user"
  fi
}

git-config-sparse-checkout() {
  git config core.sparseCheckout true
  vim .git/info/sparse-checkout
  git-reset-tree
}

gst() {
  git status --short \
  | _shorten-paths \
  | sed -Ee "s/^(.)(.)/${esc}[32m\1${esc}[0m${esc}[31m\2${esc}[0m/"
}

grr() {
  git branch -r \
  | grep -vE "$MY_NAME|((master|develop)$)" \
  | xargs -L1 git branch -dr
  git branch -dr origin/HEAD &> /dev/null
}

gbl() {
  local out=$(git blame HEAD --abbrev=6 -s -L ${@:1})
  local n=$( \
    echo $out | \
    \sed -nEe "s/[^)]*) ( *)[^ ].*/\1/p" | \
    awk '{print length}' | \
    sort -g | \
    head -n1
  )

  echo $out \
  | \sed -Ee "s_^([0-9a-z]+) ( *[0-9]+)\) ( {0,$n})_${esc}[32m\1 ${esc}[34m\2${esc}[0m _" \
  | \less -iSXFR
}

alias ga="git add"
alias gap="git apply -p0"
alias gb="git branch"
alias gcl="git clone"
alias gcls="gcl --depth 1 --single-branch"
alias gco="git checkout"
alias grst="git reset"
alias gt="git tag"
alias gbs="git branch -a --format='%(refname:short) %(color:red)%(authordate:relative)' --list *$MY_NAME*"
alias gbi="git bisect"
alias grm="git rm --cached"
alias gsub="git submodule"

alias gcp="git cherry-pick"
alias gcpa="git cherry-pick --abort"
alias gcpc="git cherry-pick --continue"

alias grvt="git revert"
alias grvta="git revert --abort"

gls() { git ls-tree --full-tree -r HEAD | cut -f2; }
alias glsr="git ls-remote --heads origin | cut -d/  -f3-"
# List a tree of files managed by the repo
alias glst="git ls-tree -r --name-only HEAD | tree --fromfile"

alias gp="git push"
alias gf="git fetch"
alias gpl="git pull"

gfco() {
  local ref=(`git remote show origin | grep -o "\S*$1\S*" | sort -u`)

  if (( ${#ref} > 1 )); then
    echo "Which one exactly?"
    for r in $ref; do echo $r; done
  elif (( ${#ref} )); then
    gf origin $ref \
    && gco origin/$ref
  else
    echo "Unable to find any remote branches for \"$1\"."
    return 1
  fi
}

alias gt="git tag"
gtr() { git ls-remote --tags ${1:-origin}; }
gtf() { git fetch --tags ${1:-origin} ${2:-master}; }
gtfp() { git fetch --prune ${1:-origin} +refs/tags/*:refs/tags/*; }

_diff_opts=(
  --irreversible-delete
  --ignore-all-space
  --word-diff=color
  --word-diff-regex='\b[$A-Za-z0-9_]+\b|\S'
)

_recolor_diff() {
  sed -Ee "s/${esc}\[3[12]/\0;7/g" \
       -e "s/deleted file mode [0-9]{6}/${esc}[31;7m\0${esc}[0m/"
}

gs() {
  git show "${_diff_opts[@]}" "$@" \
  | _recolor_diff \
  | less
}
alias gss='git show --stat --format=""'
gsno() { git show --oneline --name-only $1 | _shorten-paths; }

alias gsh="git stash save --include-untracked --keep-index"
alias gsha="git stash apply"
alias gshs="git stash show -p"
alias gshl="git stash list"
alias gshp="git stash pop"
alias gshd="git stash drop"

gdf() {
  git diff "${_diff_opts[@]}" "$@" \
  | _recolor_diff \
  | less
}
# Git diff between two files
alias gdff="gdf --no-index"
gdfno() { gdf --name-only ${1:-master} ${2:-HEAD} | _shorten-paths; }
gdfno1() { gdf --name-only ${1:-HEAD}{^,} | _shorten-paths; }
alias gdfc="gdf --cached"

glg() {
  local query="--all"
  for a in "$@"; do query+=" --grep=$a"; done
  local indent="`git log --oneline -1 | sed 's/ .*//;s/./ /g'`"
  git log ${=query} --graph --abbrev-commit --decorate --exclude refs/stash \
--date=format:'%m-%d-%Y %H:%M' \
--format=format:"%C(cyan)%h%C(reset) %C(red)%cd (%cr)%C(reset)%C(green)%d%C(reset)%n"\
"$indent %C(reset)%s %C(red)%an%+N"
}
alias gl-all="git log --reflog"

alias gc="git commit"
gcf() { gc --fixup ${1:-HEAD}; }
alias gcm="gc -m"

alias gr="git rebase"
gri() { gr --interactive ${@:-`gmb`}; }
gri-na() { gr --interactive --no-autosquash ${@:-`gmb`}; }
alias grc="gr --continue"
alias gra="gr --abort"

alias gm="git merge"
alias gmff="git merge --ff-only"
alias gma="git merge --abort"
alias gmc="git merge --continue"
alias gmt="git mergetool"

# Finds merge base commit between the two
gmb() { git merge-base ${2:-master} ${1:-HEAD}; }

# Git ignore file
alias gig="git update-index --assume-unchanged"
# Git unignore file
alias guig="git update-index --no-assume-unchanged"
# Git list ignored files
alias gls-ig='git ls-files -v `git rev-parse --show-toplevel` | grep ^[a-z]'

# Removes all orphaned data immediately
alias git-gc-aggressive="git reflog expire --expire=now --all && git gc --prune=now --aggressive"

# The most useful aliases
alias _gst="GIT_DIR=_git gst"
alias _gdf="GIT_DIR=_git gdf"
alias _gdfc="GIT_DIR=_git gdfc"
alias _glg="GIT_DIR=_git glg"
alias _ga="GIT_DIR=_git ga"
alias _gcm="GIT_DIR=_git gcm"
alias _gcf="GIT_DIR=_git gcf"
alias _gco="GIT_DIR=_git gco"
alias _gp="GIT_DIR=_git gp"
alias _gri="GIT_DIR=_git gri"
alias _grm="GIT_DIR=_git grm"
alias _grst="GIT_DIR=_git grst"
