# The following lines were added by compinstall

zstyle ':completion:*' completer _complete _ignored _approximate
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list \
  '' \
  'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' \
  'r:|[._-]=** r:|=**'
zstyle ':completion:*' max-errors 4
zstyle ':completion:*' original false
zstyle ':completion:*' preserve-prefix '//[^/]##/'

autoload -Uz compinit
compinit -u
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
zstyle ':completion::complete:*' use-cache 1

# Should be before all other bindkey's
bindkey -v

HISTFILE=${HISTFILE:-~/.zhistory}
HISTSIZE=2000
SAVEHIST=$HISTSIZE
setopt appendhistory histignorespace histignorealldups
bindkey "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward
bindkey "^[[A" history-beginning-search-backward
bindkey "^[[B" history-beginning-search-forward

setopt autocd
unsetopt beep extendedglob nomatch notify
# End of lines configured by zsh-newuser-install

export PS1='%1~ %(!.#.$)%b%f '
export GPG_TTY=`tty`

# Enables custom Vim mappings on <C-q> & <C-s>
stty -ixon

# Fixes newline issues in terminal with %'s
stty sane

# Usage: p1 < patchfile
alias p1="patch -p1"

setup-ccache() {
  [[ $PATH != *ccache* ]] && export PATH="/usr/lib/ccache/bin:$PATH"
  export CCACHE_DIR="/home/.ccache"
}

export EDITOR="vim"
export LESS="-iSXFR -x4"

sr() {
  # Is it needed?
  #. /etc/profile 2> /dev/null
  . ~/.zshrc
  . ~/.zshenv 2> /dev/null
}
alias vr="vim ~/.zshrc && . ~/.zshrc"
alias ve="vim ~/.zshenv && . ~/.zshenv"
svr() { vim ${ZSHRC_D:-/etc/zsh/zshrc.d}/misc; }

# Copy to clipboard
xc() {
  if command -v wl-copy &>/dev/null; then
    wl-copy 2>/dev/null
  elif command -v xclip &>/dev/null; then
    xclip -selection clipboard 2>/dev/null
  elif command -v termux-clipboard-set &>/dev/null; then
    termux-clipboard-set 2>/dev/null
  elif command -v pbcopy &>/dev/null; then
    pbcopy
  else
    return 1
  fi
}

# Paste from clipboard
xp() {
  if command -v wl-paste &>/dev/null; then
    wl-paste 2>/dev/null
  elif command -v xclip &>/dev/null; then
    xclip -selection clipboard -o 2>/dev/null
  elif command -v termux-clipboard-get &>/dev/null; then
    termux-clipboard-get 2>/dev/null
  elif command -v pbpaste &>/dev/null; then
    pbpaste
  else
    return 1
  fi
}
# X paste, but with newline
xpn() { xp; echo; }

alias ecurr="sudo watch -ctn 30 genlop -c"
alias ehist="sudo genlop -it"
alias ecln="sudo emerge --ask --depclean"
alias eclnd="sudo eclean-dist --deep --fetch-restricted"
alias eadd="sudo emerge --noreplace"
alias erm="sudo emerge --deselect"

elog() {
  sudo sh -c '
    h=$(( `tput lines` - 4 ))
    log=( /var/tmp/portage/*/'$1'*/temp/build.log )
    [ ! -f "$log" ] && log=( /opt/.portage_no-tmpfs/portage/*/'$1'*/temp/build.log )
    [ -f "$log" ] && >&2 echo "$log" || exit 1
    tail -fn$h "$log" \
	| sed -E -e "s_^(\[[^]]+]) .+ -o [^ ]+/([^/ ]+\.o\b).*_\1 \2_"
    #| sed -E -e "s/^ *\"?i686-pc-linux-gnu-([^ ]+)\"? .*-o \"?([^ &:\"]+).*/\1 ... -o \2/" \
    #         -e "s!^ *\"?(\[[^]]+]|[^ \"]+)\"? [^.]{3}.+ -o ([^ ]+\.o)( .*|)\$!\1 ../\2!" \
    #         -e "s/^( \* |>>> | *)\"?(\[[^]]+]|[^ \"]+)\"? [^.]{3}.+ (\"?[^ ]+).*$/\1\2 ... \3/" \
    #         -e "s!^/[^ ]+/([^/ ]+) !\1 !" \
    #         -e "s!${log%%/temp/*}(/work(/build|/'$1'[^/]+|)|)!..!g" \
    #         -e "s/\.\.\. \.\./../" \
    #         -e "/^make\\b|^$/d"
  '
}

esync() {
  local sync_log="/tmp/.emaint.log"

  if sudo sh -c "
    printf 'Syncing... '
    emaint sync ${1:+--repo} ${1:---auto} &> $sync_log
  "
  then
    echo "done"
  else
    echo "FAILED $sync_log"
    return 1
  fi
}

emrg() {
  if (( $# )); then
    if [[ "$1" == -* ]]; then
      sudo emerge "$@"
    else
      sudo emerge -av --quiet-build "$@"
    fi
  else
    sudo emerge -avuUDN --quiet-build --keep-going @world
  fi
}

emrg-resume() {
  if (( $# )); then
    sudo sh -c "FEAUTURES=keepwork emerge --quiet-build $@"
  else
    sudo sh -c "FEAUTURES=keepwork emerge --quiet-build --resume"
  fi
}

alias bfs-usage="sudo btrfs filesystem usage"
alias bfs-du="sudo btrfs fi du"
alias bfs-df="sudo btrfs fi df"
alias bfs-comp="sudo compsize"
alias bfs-defrag="sudo btrfs filesystem defragment -r -clzo"

alias cpv="rsync -ah --info=name,progress"
# Should remove empty source dirs afterwards
alias mvv="rsync -ah --info=name,progress --remove-source-files"

alias bat=battery
alias ccs="CCACHE_DIR=/var/cache/ccache watch -d -n13 ccache --show-stats"
alias ptop="sudo powertop"
alias psw="sudo /usr/local/bin/psw"
alias rn="perl-rename"
alias xb="sudo xb"
alias xs="xargs -I{}"
alias btr="sudo bluetooth-restart"

alias poff="loginctl poweroff"
alias rbt="loginctl reboot"
alias susp="loginctl suspend-then-hibernate"

setup-distcc() {
  [[ $PATH != *distcc* ]] \
  && export PATH="/usr/lib/distcc/bin:${PATH}"
}

alias distcc-mon="DISTCC_DIR=/var/tmp/portage/.distcc distccmon-text 3"
alias distcc-mon-h="DISTCC_DIR=/home/.portage/tmp/portage/.distcc distccmon-text 3"

rs() {
  if command -v gammastep &>/dev/null; then
    local app="gammastep"
  elif command -v redshift &>/dev/null; then
    local app="redshift"
  else
    echo "Sorry, can't\!"
    return 1
  fi
  [[ $TERM = *linux ]] && local use_drm=1
  pkill $app
  $app ${use_drm:+-mdrm} ${1:+-PO ${1}00K} ${1:--x} ${2:+-g $2} &
  disown
}

function = {
	printf "= "
	command bc -l <<< `
		echo "$@" \
		| sed -Ee "s/,/./g" \
			   -e "s/ //g"  \
			   -e "s/([0-9.]+)k/(\1*1000)/g" \
			   -e "s/%/*100/g"
	`
}
dc() { date --date "$*"; }

alias epoch-seconds="date +%s"

backup() {
	local date=`date +%Y-%m-%d`
	local name

	if [[ -f "$1" || -d "$1" ]]; then
		name=`basename $1`
	else
		name="$1"
		shift
	fi

	7z a -mhe=on -mhc=on -m0=lzma2 -mx=9 -ms=128f512m -v4g -p \
		${name}_${date}.7z $*

	[ ! -f ${name}_${date}.7z.002 ] \
	&& mv ${name}_${date}.7z{.001,}
}

x() { sed -n $1p $2; }
bt-restart() {
  sudo rc-service bluealsa stop
  sudo rc-service bluetooth stop
  sudo rc-service bluetooth start
  sudo rc-service bluealsa start
}

my-du() { du -hd1 -BM ${1:-.} | sort -n; }
my-ping() { while ! ping ${1:-gentoo.org}; do sleep 3; done }
my-sdiff() {
  local S
  for i in "$@"; do
    [ "$i" = -s ] && S=1
  done
  sdiff -tw `tput cols` $@ \
  | ([ $S ] && cat || sed -Ee "s/^(.+ \| .*|.+<| +> .*)$/${esc}[32m\1${esc}[0m/") \
  | less
}

alias ccache-stats="CCACHE_DIR=/var/cache/ccache watch -d -n 31 ccache --show-stats"

ccache-enable() {
  export PATH="/usr/lib/ccache/bin${PATH:+:}$PATH"
  export CCACHE_DIR="/home/.ccache"
  echo "ccache enabled!"
}
